음료수 얼려 먹기

# 입력받기
n ,m = map(int,input().split())

# 그래프 입력 받기
graph = []
for i in range(n):
    graph.append(list(map(int,input())))
   
# dfs 함수 정의
def dfs(x,y):
    # 주어진 범위를 벗어나는 경우에는 즉시 종료
    if x<=-1 or x>=n or y<= -1 or y>= m:
        return False
    # 현재 노드를 아직 방문하지 않았다면
    if graph[x][y] == 0:
        # 해당 노드 방문 처리
        graph[x][y] = 1
        # 상하좌우의 위치도 모두 재귀적으로 호출
        dfs(x-1,y)
        dfs(x+1,y)
        dfs(x,y-1)
        dfs(x,y+1)
        return True
    return False

# 모든 노드에 대하여 채우기
result = 0
for i in range(n):
    for j in range(m):
        # 현재 위치에서 dfs 수행
        if dfs(i,j) == True:
            result +=1
        
print(result)

================================================================
미로탈출

from collections import deque

# 입력받기
n, m = map(int, input().split())

# 그래프 입력받기
graph =[]
for i in range(n):
    graph.append(list(map(int,input())))
    
dx = [-1,1,0,0]
dy = [0,0,-1,1]

# bfs 정의
def bfs(x,y):
    # 1. 큐 객체 생성
    queue = deque()
    queue.append((x,y))
    
    # 2. 큐가 빌 때까지
    while queue:
        # 3. popleft
        x,y = queue.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            
            if nx<0 or ny<0 or nx >= n or ny >= m:
                continue
            if graph[nx][ny] == 0 :
                continue
            if graph[nx][ny] == 1:
                graph[nx][ny] = graph[x][y] +1
                4. 다음 녀석 큐에 추가
                queue.append((nx,ny))
    return graph[n-1][m-1]

print(bfs(0,0))
                
================================================================
특정거리 도시 찾기

from collections import deque

# 입력받기
n, m, k, x = map(int,input().split())

# 그래프 받을 준비
graph = [[] for i in range(n+1)]  # 편의를 위해 n+1개 생성

# 그래프 입력 받기
for i in range(m):
    a, b = map(int,input().split())
    graph[a].append(b)
 
# 거리 리스트 초기화
distance = [-1 for i in range(n+1)]
distance[x] = 0

# bfs
# 1. 큐 객체생성
queue = deque([x]) 
# 2. 큐가 빌 때까지
while queue:
    # 3. popleft
    now = queue.popleft()
    
    for next in graph[now]: 
        if distance[next] ==-1:
            distance[next] = distance[now] +1
            # 4. 다음 녀석 큐에 추가
            queue.append(next)
            
check = False
for i in range(1,n+1):
    if distance[i] == k:
        print(i)
        check = True
        
if check == False:
    print(-1)
    
============================================================
# 경쟁적 전염
from collections import deque
# 입력받기
n, k = map(int,input().split())

data =[] # 바이러스 종류, 위치 정보 받을 리스트
graph = [] # 그래프 받을 리스트

# 그래프 입력받기
for i in range(n):
    graph.append(list(map(int,input().split())))
    for j in range(n):
        if graph[i][j] != 0:
            data.append((graph[i][j],0,i,j)) # 바이러스 종류, 시간, 위치 튜플로 받기

# 입력받기
s, a, b = map(int,input().split())

data.sort()

# 1. 큐 객체 생성
q = deque(data)

dx=[-1,1,0,0]
dy=[0,0,-1,1]

# 2. 큐가 빌 때까지
while q:
    # 3. popleft
    virus, t, x, y = q.popleft()
    if t == s:
        break
        for i in range(4):
            nx = x +dx[i]
            ny = y + dy[i]
        if 0<=nx and nx<n and 0<=ny and ny<n:
            if graph[nx][ny] == 0:
                graph[nx][ny] = virus
                # 4. 다음녀석 큐에 추가
                q.append((virus, t+1,nx,ny))
            
print(graph[a-1][b-1])
=========================================================================
